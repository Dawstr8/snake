import random
import time
import sys
import copy
import math

sys.setrecursionlimit(1000000)

#big_hamiltonian_cycle = [(4, 0), (4, 1), (3, 1), (3, 0), (2, 0), (2, 1), (2, 2), (1, 2), (1, 1), (1, 0), (0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (3, 3), (3, 2), (4, 2), (4, 3), (4, 4), (3, 4), (2, 4), (1, 4), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 9), (1, 8), (1, 7), (1, 6), (1, 5), (2, 5), (3, 5), (4, 5), (4, 6), (3, 6), (2, 6), (2, 7), (3, 7), (4, 7), (4, 8), (3, 8), (2, 8), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (9, 8), (9, 7), (9, 6), (8, 6), (7, 6), (7, 7), (8, 7), (8, 8), (7, 8), (6, 8), (5, 8), (5, 7), (6, 7), (6, 6), (5, 6), (5, 5), (6, 5), (7, 5), (8, 5), (9, 5), (10, 5), (11, 5), (12, 5), (12, 6), (11, 6), (10, 6), (10, 7), (11, 7), (12, 7), (13, 7), (13, 6), (13, 5), (14, 5), (14, 6), (14, 7), (14, 8), (13, 8), (12, 8), (11, 8), (10, 8), (10, 9), (11, 9), (12, 9), (13, 9), (14, 9), (14, 10), (14, 11), (14, 12), (13, 12), (13, 11), (13, 10), (12, 10), (12, 11), (12, 12), (11, 12), (11, 11), (11, 10), (10, 10), (10, 11), (10, 12), (10, 13), (11, 13), (12, 13), (13, 13), (14, 13), (14, 14), (13, 14), (12, 14), (11, 14), (10, 14), (9, 14), (8, 14), (7, 14), (7, 13), (6, 13), (6, 14), (5, 14), (5, 13), (5, 12), (6, 12), (7, 12), (8, 12), (8, 13), (9, 13), (9, 12), (9, 11), (9, 10), (8, 10), (8, 11), (7, 11), (7, 10), (6, 10), (6, 11), (5, 11), (5, 10), (4, 10), (3, 10), (3, 11), (4, 11), (4, 12), (3, 12), (2, 12), (2, 11), (2, 10), (1, 10), (0, 10), (0, 11), (1, 11), (1, 12), (0, 12), (0, 13), (1, 13), (2, 13), (3, 13), (4, 13), (4, 14), (3, 14), (2, 14), (1, 14), (0, 14), (0, 15), (1, 15), (1, 16), (0, 16), (0, 17), (1, 17), (1, 18), (0, 18), (0, 19), (1, 19), (2, 19), (3, 19), (3, 18), (2, 18), (2, 17), (3, 17), (3, 16), (2, 16), (2, 15), (3, 15), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (3, 24), (2, 24), (1, 24), (1, 23), (1, 22), (1, 21), (2, 21), (2, 22), (2, 23), (3, 23), (3, 22), (3, 21), (3, 20), (2, 20), (1, 20), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (1, 25), (1, 26), (0, 26), (0, 27), (0, 28), (0, 29), (1, 29), (2, 29), (2, 28), (1, 28), (1, 27), (2, 27), (2, 26), (2, 25), (3, 25), (4, 25), (4, 26), (3, 26), (3, 27), (4, 27), (4, 28), (3, 28), (3, 29), (4, 29), (5, 29), (5, 28), (6, 28), (6, 29), (7, 29), (8, 29), (9, 29), (9, 28), (8, 28), (7, 28), (7, 27), (6, 27), (5, 27), (5, 26), (5, 25), (6, 25), (6, 26), (7, 26), (7, 25), (8, 25), (8, 26), (8, 27), (9, 27), (9, 26), (9, 25), (9, 24), (9, 23), (8, 23), (8, 24), (7, 24), (6, 24), (5, 24), (5, 23), (6, 23), (7, 23), (7, 22), (8, 22), (9, 22), (9, 21), (9, 20), (8, 20), (8, 21), (7, 21), (7, 20), (6, 20), (6, 21), (6, 22), (5, 22), (5, 21), (5, 20), (5, 19), (6, 19), (6, 18), (5, 18), (5, 17), (6, 17), (6, 16), (5, 16), (5, 15), (6, 15), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (8, 19), (9, 19), (9, 18), (8, 18), (8, 17), (9, 17), (9, 16), (8, 16), (8, 15), (9, 15), (10, 15), (10, 16), (11, 16), (11, 15), (12, 15), (12, 16), (13, 16), (13, 15), (14, 15), (14, 16), (14, 17), (14, 18), (13, 18), (13, 17), (12, 17), (11, 17), (10, 17), (10, 18), (10, 19), (11, 19), (11, 18), (12, 18), (12, 19), (13, 19), (14, 19), (14, 20), (13, 20), (13, 21), (14, 21), (14, 22), (14, 23), (14, 24), (13, 24), (12, 24), (11, 24), (11, 23), (12, 23), (13, 23), (13, 22), (12, 22), (12, 21), (12, 20), (11, 20), (10, 20), (10, 21), (11, 21), (11, 22), (10, 22), (10, 23), (10, 24), (10, 25), (11, 25), (12, 25), (13, 25), (14, 25), (14, 26), (14, 27), (14, 28), (13, 28), (13, 27), (13, 26), (12, 26), (12, 27), (12, 28), (11, 28), (11, 27), (11, 26), (10, 26), (10, 27), (10, 28), (10, 29), (11, 29), (12, 29), (13, 29), (14, 29), (15, 29), (16, 29), (17, 29), (18, 29), (19, 29), (19, 28), (18, 28), (18, 27), (19, 27), (19, 26), (18, 26), (17, 26), (17, 27), (17, 28), (16, 28), (15, 28), (15, 27), (16, 27), (16, 26), (15, 26), (15, 25), (16, 25), (17, 25), (18, 25), (19, 25), (20, 25), (20, 26), (20, 27), (20, 28), (20, 29), (21, 29), (22, 29), (23, 29), (23, 28), (23, 27), (22, 27), (22, 28), (21, 28), (21, 27), (21, 26), (21, 25), (22, 25), (22, 26), (23, 26), (23, 25), (24, 25), (24, 26), (24, 27), (24, 28), (24, 29), (25, 29), (25, 28), (25, 27), (25, 26), (25, 25), (26, 25), (27, 25), (28, 25), (28, 26), (27, 26), (26, 26), (26, 27), (26, 28), (26, 29), (27, 29), (28, 29), (29, 29), (29, 28), (28, 28), (27, 28), (27, 27), (28, 27), (29, 27), (29, 26), (29, 25), (29, 24), (28, 24), (27, 24), (26, 24), (25, 24), (25, 23), (26, 23), (27, 23), (28, 23), (29, 23), (29, 22), (29, 21), (29, 20), (28, 20), (27, 20), (27, 21), (28, 21), (28, 22), (27, 22), (26, 22), (25, 22), (25, 21), (26, 21), (26, 20), (25, 20), (24, 20), (23, 20), (23, 21), (24, 21), (24, 22), (24, 23), (24, 24), (23, 24), (23, 23), (23, 22), (22, 22), (21, 22), (21, 21), (22, 21), (22, 20), (21, 20), (20, 20), (20, 21), (20, 22), (20, 23), (21, 23), (22, 23), (22, 24), (21, 24), (20, 24), (19, 24), (18, 24), (18, 23), (19, 23), (19, 22), (18, 22), (18, 21), (19, 21), (19, 20), (18, 20), (17, 20), (17, 21), (17, 22), (16, 22), (16, 23), (17, 23), (17, 24), (16, 24), (15, 24), (15, 23), (15, 22), (15, 21), (16, 21), (16, 20), (15, 20), (15, 19), (16, 19), (17, 19), (17, 18), (18, 18), (18, 19), (19, 19), (19, 18), (19, 17), (19, 16), (18, 16), (18, 17), (17, 17), (16, 17), (16, 18), (15, 18), (15, 17), (15, 16), (15, 15), (16, 15), (16, 16), (17, 16), (17, 15), (18, 15), (19, 15), (20, 15), (20, 16), (20, 17), (20, 18), (20, 19), (21, 19), (22, 19), (22, 18), (21, 18), (21, 17), (21, 16), (21, 15), (22, 15), (22, 16), (22, 17), (23, 17), (23, 16), (23, 15), (24, 15), (24, 16), (24, 17), (24, 18), (23, 18), (23, 19), (24, 19), (25, 19), (26, 19), (27, 19), (27, 18), (26, 18), (25, 18), (25, 17), (26, 17), (26, 16), (25, 16), (25, 15), (26, 15), (27, 15), (27, 16), (27, 17), (28, 17), (28, 18), (28, 19), (29, 19), (29, 18), (29, 17), (29, 16), (28, 16), (28, 15), (29, 15), (29, 14), (29, 13), (29, 12), (29, 11), (29, 10), (28, 10), (28, 11), (27, 11), (27, 10), (26, 10), (26, 11), (26, 12), (26, 13), (27, 13), (27, 12), (28, 12), (28, 13), (28, 14), (27, 14), (26, 14), (25, 14), (25, 13), (25, 12), (25, 11), (25, 10), (24, 10), (23, 10), (22, 10), (22, 11), (21, 11), (21, 10), (20, 10), (20, 11), (20, 12), (21, 12), (22, 12), (23, 12), (23, 11), (24, 11), (24, 12), (24, 13), (24, 14), (23, 14), (23, 13), (22, 13), (22, 14), (21, 14), (21, 13), (20, 13), (20, 14), (19, 14), (18, 14), (18, 13), (19, 13), (19, 12), (18, 12), (18, 11), (19, 11), (19, 10), (18, 10), (17, 10), (17, 11), (17, 12), (16, 12), (16, 13), (17, 13), (17, 14), (16, 14), (15, 14), (15, 13), (15, 12), (15, 11), (16, 11), (16, 10), (15, 10), (15, 9), (16, 9), (17, 9), (18, 9), (19, 9), (19, 8), (19, 7), (19, 6), (18, 6), (18, 7), (18, 8), (17, 8), (17, 7), (16, 7), (16, 8), (15, 8), (15, 7), (15, 6), (15, 5), (16, 5), (16, 6), (17, 6), (17, 5), (18, 5), (19, 5), (20, 5), (20, 6), (21, 6), (21, 5), (22, 5), (23, 5), (24, 5), (24, 6), (24, 7), (24, 8), (23, 8), (23, 7), (23, 6), (22, 6), (22, 7), (21, 7), (20, 7), (20, 8), (20, 9), (21, 9), (21, 8), (22, 8), (22, 9), (23, 9), (24, 9), (25, 9), (25, 8), (25, 7), (25, 6), (25, 5), (26, 5), (26, 6), (27, 6), (27, 5), (28, 5), (28, 6), (28, 7), (28, 8), (27, 8), (27, 7), (26, 7), (26, 8), (26, 9), (27, 9), (28, 9), (29, 9), (29, 8), (29, 7), (29, 6), (29, 5), (29, 4), (29, 3), (29, 2), (28, 2), (28, 1), (29, 1), (29, 0), (28, 0), (27, 0), (26, 0), (26, 1), (27, 1), (27, 2), (27, 3), (28, 3), (28, 4), (27, 4), (26, 4), (25, 4), (25, 3), (26, 3), (26, 2), (25, 2), (25, 1), (25, 0), (24, 0), (23, 0), (22, 0), (22, 1), (23, 1), (24, 1), (24, 2), (23, 2), (23, 3), (24, 3), (24, 4), (23, 4), (22, 4), (22, 3), (22, 2), (21, 2), (21, 1), (21, 0), (20, 0), (20, 1), (20, 2), (20, 3), (21, 3), (21, 4), (20, 4), (19, 4), (18, 4), (17, 4), (16, 4), (15, 4), (15, 3), (15, 2), (15, 1), (16, 1), (17, 1), (17, 2), (16, 2), (16, 3), (17, 3), (18, 3), (19, 3), (19, 2), (18, 2), (18, 1), (19, 1), (19, 0), (18, 0), (17, 0), (16, 0), (15, 0), (14, 0), (14, 1), (14, 2), (13, 2), (13, 3), (14, 3), (14, 4), (13, 4), (12, 4), (12, 3), (12, 2), (12, 1), (13, 1), (13, 0), (12, 0), (11, 0), (10, 0), (10, 1), (11, 1), (11, 2), (10, 2), (10, 3), (11, 3), (11, 4), (10, 4), (9, 4), (8, 4), (7, 4), (7, 3), (8, 3), (9, 3), (9, 2), (8, 2), (8, 1), (9, 1), (9, 0), (8, 0), (7, 0), (7, 1), (7, 2), (6, 2), (6, 3), (6, 4), (5, 4), (5, 3), (5, 2), (5, 1), (6, 1), (6, 0), (5, 0)]

big_hamiltonian_cycle = []
small_hamiltonian_path = []
whole_hamiltonian_cycle = []
found = False

class Node():
    def __init__(self, position):
        self.position = position

    def get_neighbors(self, size):
        array_of_neighbors = []
        for direction in directions:
            if self.position[0] + direction[0] < size and self.position[0] + direction[0] >= 0 and self.position[1] + direction[1] < size and self.position[1] + direction[1] >= 0:
                array_of_neighbors.append((self.position[0] + direction[0], self.position[1] + direction[1]))
        return array_of_neighbors

def is_hamiltonian_cycle(temp_hamiltonian_cycle, size):
    are_neighbors = True
    for i in range(len(temp_hamiltonian_cycle) - 1):
        if temp_hamiltonian_cycle[i] not in Node(temp_hamiltonian_cycle[i+1]).get_neighbors(size):
            are_neighbors = False
    if len(temp_hamiltonian_cycle) == len(temp_hamiltonian_cycle) == size ** 2 and temp_hamiltonian_cycle[0] in Node(temp_hamiltonian_cycle[len(temp_hamiltonian_cycle) - 1]).get_neighbors(size) and are_neighbors:
        return True
    else:
        return False


with open('answer.txt', 'w') as file:

    up = (0,-1)
    down = (0,1)
    left = (-1,0)
    right = (1,0)
    directions = [up, down, left, right]

    def backtrack(temp_hamiltonian_path, ending_point, size, type):
        if len(temp_hamiltonian_path) == size ** 2 - 1 and ending_point in Node(temp_hamiltonian_path[len(temp_hamiltonian_path) - 1]).get_neighbors(size):
            global big_hamiltonian_cycle
            global small_hamiltonian_path
            global found
            temp_hamiltonian_path.append(ending_point)
            if type == "big_cycle":
                big_hamiltonian_cycle = temp_hamiltonian_path
            if type == "small_path":
                small_hamiltonian_path = temp_hamiltonian_path
            found = True
            return
        #print len(temp_hamiltonian_path)
        if not found:
            neighbors = Node(temp_hamiltonian_path[len(temp_hamiltonian_path) - 1]).get_neighbors(size)
            random.shuffle(neighbors)
            for neighbor in neighbors:
                if neighbor != ending_point and neighbor not in temp_hamiltonian_path:
                    new_hamiltonian_path = copy.deepcopy(temp_hamiltonian_path)
                    new_hamiltonian_path.append(neighbor)
                    backtrack(new_hamiltonian_path, ending_point, size, type)

    grid_width = 30
    grid_height = 30

    hamiltonian_path = []
    hamiltonian_path.append((0, 0))
    ending_point = (1, 0)
    backtrack(hamiltonian_path, ending_point, 6, "big_cycle")

    print big_hamiltonian_cycle

    for big_point in big_hamiltonian_cycle:
        hamiltonian_path = []
        x = big_point[0]
        y = big_point[1]
        if (x+y) % 2 == 1:
            hamiltonian_path.append((0, 0))
            ending_point = (4, 4)
        else:
            hamiltonian_path.append((4, 0))
            ending_point = (0, 4)
        backtrack(hamiltonian_path, ending_point, 5, "small_path")
        found = False
        new_small_hamiltonian_path = []
        for point in small_hamiltonian_path:
            new_point = (point[0] + x * 5, point[1] + y * 5)
            new_small_hamiltonian_path.append(new_point)
        print new_small_hamiltonian_path
        if len(whole_hamiltonian_cycle) != 0 and new_small_hamiltonian_path[0] not in Node(whole_hamiltonian_cycle[len(whole_hamiltonian_cycle) - 1]).get_neighbors(30):
            new_small_hamiltonian_path = new_small_hamiltonian_path[::-1]

        #print x, y, new_small_hamiltonian_path
        whole_hamiltonian_cycle += new_small_hamiltonian_path

    cycle = str(whole_hamiltonian_cycle)
    file.write(cycle)
    exit()
